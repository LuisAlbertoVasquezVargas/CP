#include<bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int  i = 0 ; i < (n) ; ++i )
#define clr( t , val ) memset( t , val , sizeof( t ) )

#define pb push_back
#define all( v ) v.begin() , v.end()
#define SZ( v ) ((int)(v).size())

#define mp make_pair
#define fi first
#define se second

#define DEBUG( x ) cout << #x << " " << (x) << endl;
#define N 100000

typedef vector< int > vi;
typedef vector< vi > vvi;
typedef long long ll;

vi fix( vi &v ){
	vi ans( 1 , v[ 0 ] );
	for( int i = 1 ; i < SZ( v ) ; ++i ){
		if( ans.back() <= v[ i ] ) continue;
		ans.pb( v[ i ] );
	}
	return ans;
}
vi MERGE( vi &a , vi &b ){
	vi ans( SZ( a ) + SZ( b ) );
	merge( all( a ) , all( b ) , ans.begin() );
	return ans;
}
vi get( vi &v ){
	int len = v[ 0 ];
	vi LIST;
	LIST.pb( 0 ) , LIST.pb( len );
	for( int i = 1 ; i < SZ( v ) ; ++i ){
		vi NLIST;
		REP( j , SZ( LIST ) - 1 ){
			int num = LIST[ j ] + v[ i ];
			while( num < LIST[ j + 1 ] ){
				NLIST.pb( num );
				num += v[ i ];
			}
		}
		LIST = MERGE( LIST , NLIST );
	}
	vi vec( len , -1 );
	REP( i , SZ( LIST ) ) 
		if( LIST[ i ] < len ) vec[ LIST[ i ] ] = 0;
	int last = 0;
	REP( i , len ){
		if( vec[ i ] == 0 ){
			last = 0;
			continue;
		}
		last ++;
		vec[ i ] = last;
	}
	return vec;
}
class ModModMod {
public:
	long long findSum(vector <int> m, int R) {
		vi vec = fix( m );
		vi modulus = get( vec );
		/*
		for( int x : vec ) cout << x << " ";
		cout << endl;
		for( int x : modulus ) cout << x << " ";
		cout << endl;
		*/
		ll ans = 0;
		for( int i = 1 ; i <= R ; ++i )
			ans += modulus[ i % vec[ 0 ] ];
		return ans;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	ModModMod *obj;
	long long answer;
	obj = new ModModMod();
	clock_t startTime = clock();
	answer = obj->findSum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	long long p2;
	
	{
	// ----- test 0 -----
	int t0[] = {5,3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2 = 4ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {33,15,7,10,100,9,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 64;
	p2 = 92ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {995,149,28,265,275,107,555,241,702,462,519,212,362,478,783,381,602,546,183,886,59,317,977,612,328,91,771,131};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 992363;
	p2 = 12792005ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 4950ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {2934};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10000000;
	p2 = 14664070144ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

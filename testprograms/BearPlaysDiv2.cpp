#include <bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; i++ )
#define clr( t , val ) memset( t , val , sizeof(t) )

#define all(v)  v.begin() , v.end()
#define pb push_back
#define SZ( v ) ((int)(v).size())

#define mp make_pair
#define fi first
#define se second

#define test() cerr << "hola que hace ?" << endl;
#define DEBUG( x ) cerr <<  #x << "=" << x << endl;
#define DEBUG2( x , y ) cerr << #x << "=" << x << " " << #y << "=" << y << endl;

#define N 50

typedef long long ll;
typedef pair< int , int > pii;
typedef vector< int > vi;
typedef vector< vi > vvi;

class BearPlaysDiv2 {
public:
	string equalPiles(int A, int B, int C) {
		int S = A + B + C;
		vvi vis( S + 1 , vi( S + 1 ) );
		queue< int > Q;
		Q.push( A );
		Q.push( B );
		vis[ A ][ B ] = 1;
		
		while( !Q.empty() ){
			int uA = Q.front(); Q.pop();
			int uB = Q.front(); Q.pop();
			int uC = S - uA - uB;
			if( uA == uB && uA == uC ) return "possible";
			vi vec = { uA , uB , uC };
			REP( i , 3 ) REP( j , 3 ){
				if( i == j ) continue;
				if( vec[ i ] < vec[ j ] ){
					vi nvec = vec;
					nvec[ i ] += vec[ i ];
					nvec[ j ] -= vec[ i ];
					if( !vis[ nvec[ 0 ] ][ nvec[ 1 ] ] ){
						Q.push( nvec[ 0 ] );
						Q.push( nvec[ 1 ] );
						vis[ nvec[ 0 ] ][ nvec[ 1 ] ] = 1;
					}
				}
			}
		}
		return "impossible";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	BearPlaysDiv2 *obj;
	string answer;
	obj = new BearPlaysDiv2();
	clock_t startTime = clock();
	answer = obj->equalPiles(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 10;
	p1 = 15;
	p2 = 35;
	p3 = "possible";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	p2 = 2;
	p3 = "impossible";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 6;
	p2 = 8;
	p3 = "impossible";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 18;
	p1 = 18;
	p2 = 18;
	p3 = "possible";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 225;
	p1 = 500;
	p2 = 475;
	p3 = "possible";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

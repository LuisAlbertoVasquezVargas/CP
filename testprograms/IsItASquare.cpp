#include <bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; i++ )
#define clr( t , val ) memset( t , val , sizeof(t) )

#define all(v)  v.begin() , v.end()
#define pb push_back
#define SZ( v ) ((int)(v).size())

#define mp make_pair
#define fi first
#define se second

#define test() cout << "hola que hace ?" << endl;
#define DEBUG( x ) cout <<  #x << "=" << x << endl;
#define DEBUG2( x , y ) cout << #x << "=" << x << " " << #y << "=" << y << endl;

typedef long long ll;
typedef vector< ll > vll;
typedef pair< int , int > pii;
typedef vector< int > vi;
typedef vector< vi > vvi;

struct Point{
	ll x , y;
	Point(){ x = y = 0; }
	Point( ll x , ll y ) : x( x ) , y( y ) {}
	Point ort(){ return Point( -y , x ); }
	ll dist(){ return x * x + y * y; }
};
typedef vector<Point> Polygon;

Point operator -( const Point &A , const Point &B ){ return Point( A.x - B.x , A.y - B.y ); }
Point operator +( const Point &A , const Point &B ){ return Point( A.x + B.x , A.y + B.y ); }
bool operator <( const Point &A , const Point &B ){ 
	return A.x == B.x ? A.y < B.y : A.x < B.x ; 
}

ll dot( const Point &A , const Point &B ){ return A.x*B.x + A.y*B.y ; }
ll cross( const Point &A , const Point &B ){ return A.x*B.y - A.y*B.x; }
ll area( const Point &A , const Point &B , const Point &C ){ return cross( B - A , C - A ); }

ll dist( const Point &A , const Point &B ){
	return (B - A).dist();
}

Polygon convexHull( Polygon P ){
	sort( all( P ) );
	int nP = P.size() , k = 0;
	Point H[ nP << 1 ];
	REP( i , nP ){
		while( k >= 2 && area( H[ k - 2 ] , H[ k - 1 ] , P[ i ] ) <= 0 ) k--;
		H[ k++ ] = P[ i ];
	}
	for( int i = nP - 2 , sz = k; i >= 0 ; --i ){
		while( k > sz && area( H[ k - 2 ] , H[ k - 1 ] , P[ i ] ) <= 0 ) k--;
		H[ k++ ] = P[ i ];
	}
	if( k == 0 ) return Polygon();
	return Polygon( H , H + k - 1 );
}
bool colinear( Polygon P ){
	for( int i = 2 ; i < SZ(P) ; ++i )
		if( cross( P[ i ] - P[ 0 ] , P[ 1 ] - P[ 0 ] ) != 0 ) return 0;
	return 1;
}
vector< string > ans = { "Not a square" , "It's a square" };
bool solve( vi x , vi y ){
	Polygon P( 4 );
	REP( i , 4 ) P[ i ] = Point( x[ i ] , y[ i ] );
	if( colinear( P ) ) return 0;
	
	P = convexHull( P );

	if( SZ( P ) != 4 ) return 0;

	ll d = dist( P[ 0 ] , P[ 1 ] );
	
	REP( i , 4 )
		if( dist( P[ i ] , P[ (i + 1) % 4 ] ) != d ) return 0;

	REP( i , 4 )
		if( dot( P[ (i + 1) % 4 ] - P[ i ] , P[ (i - 1 + 4) % 4 ] - P[ i ] ) != 0 ) return 0;
	return 1;
}
class IsItASquare {
public:
	string isSquare(vector <int> x, vector <int> y) {
		return ans[ solve( x , y ) ];
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	IsItASquare *obj;
	string answer;
	obj = new IsItASquare();
	clock_t startTime = clock();
	answer = obj->isSquare(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	string p2;
	
	{
	// ----- test 0 -----
	int t0[] = {0,0,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,2,0,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "It's a square";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,1,5,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,6,0,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "It's a square";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0,7,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,3,0,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Not a square";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,5000,5000,10000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {5000,0,10000,5000};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "It's a square";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,2,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4,3,2,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Not a square";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0,5,3,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,0,4,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Not a square";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

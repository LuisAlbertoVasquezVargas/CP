#include<bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int  i = 0 ; i < (n) ; ++i )
#define clr( t , val ) memset( t , val , sizeof( t ) )

#define pb push_back
#define all( v ) v.begin() , v.end()
#define SZ( v ) ((int)(v).size())

#define mp make_pair
#define fi first
#define se second

#define DEBUG( x ) cout << #x << " " << (x) << endl;

#define N 100
#define INF (1<<28)

typedef vector< int > vi;
typedef vector< vi > vvi;
typedef long long ll;

vi G[ N + 5 ] , C[ N + 5 ];
int n;
void clear(){
	REP( i , n ){
		G[ i ].clear();
		C[ i ].clear();
	}
}
void add( int u , int v , int w ){
	G[ u ].pb( v );
	C[ u ].pb( w );
	G[ v ].pb( u );
	C[ v ].pb( w );
}
vi bfs( int s ){
	vi d( n , INF );
	deque< int > Q;
	d[ s ] = 0;
	Q.push_front( s );
	while( !Q.empty() ){
		int u = Q.front();Q.pop_front();
		REP( i , SZ( G[ u ] ) ){
	 		int v = G[ u ][ i ];
	 		int w = C[ u ][ i ];
	 		if( d[ u ] + w < d[ v ] ){
	 			d[ v ] = d[ u ] + w;
	 			if( w == 0 ) Q.push_front( v );
	 			else Q.push_back( v );
	 		}
		}
	}
	return d;
}
int getDiam(){
	vvi d( n );
	REP( i , n ) d[ i ] = bfs( i );
	int ans = 0;
	REP( i , n )REP( j , n ) ans = max( ans , d[ i ][ j ] );
	return ans;
}
class PublicTransit {
public:
	int minimumLongestDistance(int R, int C) {
		n = R * C;
		int ans = INT_MAX;
		for( int a = 0 ; a < R ; ++a )
			for( int c = a ; c < R ; ++c )
				for( int b = 0 ; b < C ; ++b )
					for( int d = 0 ; d < C ; ++d ){
						clear();
						REP( i , R )REP( j , C ) {
							if( i + 1 < R ) add( i * C + j , (i + 1) * C + j , 1 );
							if( j + 1 < C ) add( i * C + j , (i) * C + (j + 1) , 1 );
						}
						add( a * C + b , c * C + d , 0 );
						ans = min( ans , getDiam() );
					}
		return ans;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	PublicTransit *obj;
	int answer;
	obj = new PublicTransit();
	clock_t startTime = clock();
	answer = obj->minimumLongestDistance(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 4;
	p1 = 1;
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 3;
	p2 = 4;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 8;
	p1 = 2;
	p2 = 4;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

#include<bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; ++i )
#define clr( t , val ) memset( t , val , sizeof( t ) )

#define pb push_back
#define all( v ) v.begin() , v.end()
#define SZ( v ) ((int)(v).size())

#define mp make_pair
#define fi first
#define se second

#define N 10000000

typedef vector< int > vi;
typedef long long ll;

int POT[] = { 1 , 10 , 100 , 1000 , 10000 , 100000 , 1000000 , 10000000 };
int vec[ 7 ];
void impr( vi &v ){
	REP( i , SZ( v ) ) printf( "%d%c" , v[ i ] , (i + 1 == SZ(v)) ? 10 : 32 );
}
int P[ N + 5 ];
int main(){
	clr( P , 1 );
	P[ 0 ] = P[ 1 ] = 0;
	for( int j = 4 ; j <= N ; j += 2 ) P[ j ] = 0;
	for( int i = 3 ; i * i <= N ; i += 2 )
		if( P[ i ] ) for( int j = i * i ; j <= N ; j += i ) P[ j ] = 0;
	/*
	REP( i , 20 ) if( P[ i ] ) cout << i << " ";
	cout << endl;
	*/
	int n , K , L;
	while( scanf( "%d%d%d" , &n , &K , &L ) == 3 ){
	/*
	for( int n = 7 ; n <= 7 ; ++n )
		for( int K = 1 ; K <= n ; ++K )
			for( int L = 1 ; L <= 8 ; ++L ){
	*/
		if( n == 7 && K == 1 && L == 1 ) puts( "1000003" );
		if( n == 7 && K == 1 && L == 2 ) puts( "1000003 1000033" );
		if( n == 7 && K == 1 && L == 3 ) puts( "1000003 1000303 1000403" );
		if( n == 7 && K == 1 && L == 4 ) puts( "1000003 1001003 1003003 1006003" );
		if( n == 7 && K == 1 && L == 5 ) puts( "1000193 1003193 1006193 1008193 1009193" );
		if( n == 7 && K == 1 && L == 6 ) puts( "1002347 1202347 1302347 1602347 1802347 1902347" );
		if( n == 7 && K == 1 && L == 7 ) puts( "1033777 1133777 1333777 1433777 1633777 1733777 1933777" );
		if( n == 7 && K == 1 && L == 8 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 2 && L == 1 ) puts( "1000003" );
		if( n == 7 && K == 2 && L == 2 ) puts( "1000003 1000333" );
		if( n == 7 && K == 2 && L == 3 ) puts( "1000003 1020023 1030033" );
		if( n == 7 && K == 2 && L == 4 ) puts( "1000003 1020023 1030033 1050053" );
		if( n == 7 && K == 2 && L == 5 ) puts( "1000003 1020023 1030033 1050053 1080083" );
		if( n == 7 && K == 2 && L == 6 ) puts( "1000033 1200233 1300333 1500533 1600633 1800833" );
		if( n == 7 && K == 2 && L == 7 ) puts( "2013079 2213279 2313379 2513579 2613679 2813879 2913979" );
		if( n == 7 && K == 2 && L == 8 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 3 && L == 1 ) puts( "1000003" );
		if( n == 7 && K == 3 && L == 2 ) puts( "1000003 1005553" );
		if( n == 7 && K == 3 && L == 3 ) puts( "1000003 1005553 1009993" );
		if( n == 7 && K == 3 && L == 4 ) puts( "1000003 1011013 1033033 1066063" );
		if( n == 7 && K == 3 && L == 5 ) puts( "1000003 1110103 1220203 1440403 1550503" );
		if( n == 7 && K == 3 && L == 6 ) puts( "1000003 1110103 1220203 1440403 1550503 1880803" );
		if( n == 7 && K == 3 && L == 7 ) puts( "1017011 2027021 3037031 4047041 5057051 7077071 8087081" );
		if( n == 7 && K == 3 && L == 8 ) puts( "2090021 2191121 2292221 2494421 2595521 2696621 2898821 2999921" );
		if( n == 7 && K == 4 && L == 1 ) puts( "1000003" );
		if( n == 7 && K == 4 && L == 2 ) puts( "1000003 1044443" );
		if( n == 7 && K == 4 && L == 3 ) puts( "1000003 1111013 1444043" );
		if( n == 7 && K == 4 && L == 4 ) puts( "1000003 1440443 1660663 1770773" );
		if( n == 7 && K == 4 && L == 5 ) puts( "1001003 1221223 1331333 1661663 1991993" );
		if( n == 7 && K == 4 && L == 6 ) puts( "2422027 3433037 5455057 6466067 8488087 9499097" );
		if( n == 7 && K == 4 && L == 7 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 4 && L == 8 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 5 && L == 1 ) puts( "1000003" );
		if( n == 7 && K == 5 && L == 2 ) puts( "1000003 1555553" );
		if( n == 7 && K == 5 && L == 3 ) puts( "1000003 1555553 1999993" );
		if( n == 7 && K == 5 && L == 4 ) puts( "1111183 3333383 4444483 6666683" );
		if( n == 7 && K == 5 && L == 5 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 5 && L == 6 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 5 && L == 7 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 5 && L == 8 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 6 && L == 1 ) puts( "1111151" );
		if( n == 7 && K == 6 && L == 2 ) puts( "1111181 3333383" );
		if( n == 7 && K == 6 && L == 3 ) puts( "1111211 3333233 9999299" );
		if( n == 7 && K == 6 && L == 4 ) puts( "2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 6 && L == 5 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 6 && L == 6 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 6 && L == 7 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 6 && L == 8 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 7 && L == 1 ) puts( "2147483647" );
		if( n == 7 && K == 7 && L == 2 ) puts( "2147483647 2147483647" );
		if( n == 7 && K == 7 && L == 3 ) puts( "2147483647 2147483647 2147483647" );
		if( n == 7 && K == 7 && L == 4 ) puts( "2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 7 && L == 5 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 7 && L == 6 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 7 && L == 7 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 && K == 7 && L == 8 ) puts( "2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647" );
		if( n == 7 ) continue;
		//if( n >= 3 && n == K ) continue;
		int best = INT_MAX;
		vi v( L , best );
		REP( mask , 1 << n ){
			if( __builtin_popcount( mask ) == K ){
				vi indZeroes , indOnes;
				REP( i , n )
					if( mask & (1 << i) ) indOnes.pb( i );//K
					else indZeroes.pb( i );//n - K
				for( int num = 0 ; num < POT[ n - K ] ; ++num ){
					vi LIST;
					for( int x = 0 ; x <= 9 ; ++x ){
						int num2 = num;
						clr( vec , -1 );
						REP( i , n - K ){
							vec[ indZeroes[ i ] ] = num2 % 10;
							num2 /= 10;
						}
						if( vec[ 0 ] == 0 ) break;
						REP( i , K ) vec[ indOnes[ i ] ] = x;
						num2 = 0;
						REP( i , n ) num2 = num2 * 10 + vec[ i ];
						if( vec[ 0 ] == 0 ) continue;
						if( P[ num2 ] ) LIST.pb( num2 );
					}
					if( SZ( LIST ) >= L ){
						LIST.resize( L );
						v = min( v , LIST );
					}
				}
			}
		}
		/*
		cout << "if( n == " << n << " && K == " << K << " && L == " << L << " ) puts( ";
		cout << '"';
		REP( i , SZ( v ) ){
			if( i ) cout << " ";
			cout << v[ i ];
		}
		cout << '"';
		cout << " );" << endl;
		*/
		//cout << n << " " << K << " " << L << endl;
		impr( v );
	}
}



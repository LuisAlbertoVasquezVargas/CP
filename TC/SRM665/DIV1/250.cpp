#include<bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int  i = 0 ; i < (n) ; ++i )
#define clr( t , val ) memset( t , val , sizeof( t ) )

#define pb push_back
#define all( v ) v.begin() , v.end()
#define SZ( v ) ((int)(v).size())

#define mp make_pair
#define fi first
#define se second

#define DEBUG( x ) cout << #x << " " << (x) << endl;
#define DEBUG2( x , y ) cout << #x << " " << (x) << " " << #y << " " << (y) <<endl;

#define N 20

typedef vector< int > vi;
typedef vector< vi > vvi;
typedef long long ll;
typedef long double ld;

bool used[ N + 1 ][ 11 ][ 2 ][ 2 ][ 2 ][ 2 ][ 3 ];
ll memo[ N + 1 ][ 11 ][ 2 ][ 2 ][ 2 ][ 2 ][ 3 ];
string S , target;
int n;
vvi F = { { 0 , 0 , 2 } , { 0 , 1 , 2 } , { 0 , 2 , 2 } };

ll dp( int pos , int carry , int taked1 , int used1 , int taked2 , int used2 , int flag ){
	if( pos < 0 ){
		//DEBUG2( flag , carry );
		return (flag <= 1) && (carry == 0);
	}
	if( used[ pos ][ carry ][ taked1 ][ used1 ][ taked2 ][ used2 ][ flag ] ) 
		return memo[ pos ][ carry ][ taked1 ][ used1 ][ taked2 ][ used2 ][ flag ];
	used[ pos ][ carry ][ taked1 ][ used1 ][ taked2 ][ used2 ][ flag ] = 1;
	
	ll &dev = memo[ pos ][ carry ][ taked1 ][ used1 ][ taked2 ][ used2 ][ flag ] = 0;
	int lo , hi;
	if( S[ pos ] == '?' ){
		lo = 0 , hi = 9;
		if( pos == 0 ) lo ++;
	}else lo = hi = (S[ pos ] - '0');
	vi op1 , op2;
	if( taked1 ){
		if( used1 ) op1 = { 0 , 4 , 7 };
		else op1 = { 4 , 7 };
	}else op1 = { 0 };
	
	if( taked2 ){
		if( used2 ) op2 = { 0 , 4 , 7 };
		else op2 = { 4 , 7 };
	}else op2 = { 0 };
	
	for( auto x : op1 )
		for( auto y : op2 ){
			int cur = (carry + x + y)%10;
			int cond;
			if( cur < (target[ pos ] - '0') ) cond = 0;
			else if( cur == (target[ pos ] - '0') ) cond = 1;
			else cond = 2;
			if( lo <= cur && cur <= hi ){
				dev = dev + dp( pos - 1 , (carry + x + y)/10 , 
				(taked1 ? ((x == 0 ? 0 : 1)) : 0) , 1 , 
				(taked2 ? ((y == 0 ? 0 : 1)) : 0) , 1 , 
				F[ flag ][ cond ] );
			}
		}
	return dev;
}
string tos( ll x ){
	ostringstream out;
	out << x;
	return out.str();
}
ll toi( string s ){
	istringstream in( s );
	ll x;
	in >> x;
	return x;
}
bool f( ll num ){
	clr( used , 0 );
	target = tos( num );
	//DEBUG2( target , S );
	return dp( n - 1 , 0 , 1 , 0 , 1 , 0 , 1 );
}
ll TEN[ N + 5 ];
class LuckySum {
public:
	long long construct(string note) {
		TEN[ 0 ] = 1;
		for( int i = 1 ; i <= N ; ++i ) TEN[ i ] = TEN[ i - 1 ] * 10LL;
		S = note;
		n = SZ(S);
		ll lo = TEN[ n - 1 ] , hi = TEN[ n ] - 1 ;
		DEBUG2( lo , hi );
		if( f( hi ) == 0 ) return -1;
		while( hi - lo > 1 ){
			ll med = (lo + hi) >> 1;
			if( f( med ) ) hi = med;
			else lo = med;
		}
		return hi;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	LuckySum *obj;
	long long answer;
	obj = new LuckySum();
	clock_t startTime = clock();
	answer = obj->construct(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	long long p1;
	
	{
	// ----- test 0 -----
	p0 = "?";
	p1 = 8ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "?1";
	p1 = 11ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "4?8";
	p1 = 448ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "2?" "?";
	p1 = -1ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?";
	p1 = 11888888888888ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

#include <bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; i++ )
#define clr( t , val ) memset( t , val , sizeof(t) )

#define all(v)  v.begin() , v.end()
#define pb push_back
#define SZ( v ) ((int)(v).size())

#define mp make_pair
#define fi first
#define se second

#define test() cout << "hola que hace ?" << endl;
#define DEBUG( x ) cout <<  #x << "=" << x << endl;
#define DEBUG2( x , y ) cout << #x << "=" << x << " " << #y << "=" << y << endl;

#define N 30

typedef long long ll;
typedef vector< ll > vll;
typedef pair< int , int > pii;
typedef vector< int > vi;
typedef vector< vi > vvi;

vll getDiv( ll n ){
	vll vec;
	for( ll d1 = 1 ; d1 * d1 <= n ; ++d1 ){
		if( n % d1 == 0 ){
			ll d2 = n / d1;
			if( d2 >= 2 ) vec.pb( d1 );
			if( d1 >= 2 ) vec.pb( d2 );
		}
	}
	sort( all( vec ) );
	return vec;
}
map< ll , vll > mapa;
bool get( ll &n , ll &tope ){
	if( !mapa.count( n ) ) assert( 0 );
	ll mini = LLONG_MAX , op = -1;
	for( ll k = 0 ; k <= 1 ; ++k ){
		vll &vec = mapa[ n - k ];
		int pos = lower_bound( all( vec ) , tope ) - vec.begin();
		if( pos < SZ(vec) ){
			if( vec[ pos ] < mini ){
				mini = vec[ pos ];
				op = k;
			}
		}
	}
	if( op == -1 ) return 0;
	if( op == 0 ) n ++;
	else n --;
	tope = mini + 1;
	return 1;
}
class Procrastination {
public:
	long long findFinalAssignee(long long n) {
		if( n <= 3 ) return n;
				
		for( ll x = max( 1LL , n - 500LL ) ; x <= n + 500LL ; ++x )
			mapa[ x ] = getDiv( x );
		ll tope = 2;
		while( get( n , tope ) );
		
		return n;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	Procrastination *obj;
	long long answer;
	obj = new Procrastination();
	clock_t startTime = clock();
	answer = obj->findFinalAssignee(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 5) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	
	{
	// ----- test 0 -----
	p0 = 3ll;
	p1 = 3ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 8ll;
	p1 = 11ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 20ll;
	p1 = 20ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 196248ll;
	p1 = 196259ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 5587021440ll;
	p1 = 5587021440ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	Procrastination *obj = new Procrastination();
	for( int i = 2 ; i <= 10 ; ++i ) DEBUG2( i , obj->findFinalAssignee(i) );
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

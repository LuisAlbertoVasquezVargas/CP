#include <bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; i++ )
#define clr( t , val ) memset( t , val , sizeof(t) )

#define all(v)  v.begin() , v.end()
#define pb push_back
#define SZ( v ) ((int)(v).size())

#define mp make_pair
#define fi first
#define se second

#define test() cerr << "hola que hace ?" << endl;
#define DEBUG( x ) cerr <<  #x << "=" << x << endl;
#define DEBUG2( x , y ) cerr << #x << "=" << x << " " << #y << "=" << y << endl;

#define N 2000
#define LOG 15

typedef long long ll;
typedef pair< int , int > pii;
typedef vector< int > vi;

int n;
vi G[ N + 1 ];
int mat[ N + 1 ][ N + 1 ];
bool used[ LOG + 1 ][ N + 1 ][ N + 1 ];
int memo[ LOG + 1 ][ N + 1 ][ N + 1 ];
int dp( int u , int v , int lvl ){
	if( lvl == 0 ) return mat[ u ][ v ];
	if( used[ lvl ][ u ][ v ] ) return memo[ lvl ][ u ][ v ];
	used[ lvl ][ u ][ v ] = 1;
	int &dev = memo[ lvl ][ u ][ v ] = 0;
	for( auto w : G[ u ] ){
		dev = min( 1 , dev + dp( u , w , lvl - 1 ) * dp( w , v , lvl - 1 ) );
	}
	return dev;
}
class WalkingToSchool {
public:
	string canWalkExactly(int nodes, vector <int> from, vector <int> to) {
		n = nodes;
		int m = SZ( from );
		REP( i , n ) G[ i ].clear();
		clr( mat , 0 );
		REP( i , m ){
			int u = from[ i ] , v = to[ i ];
			G[ u ].pb( v );
			mat[ u ][ v ] = 1;
		}
		clr( used , 0 );
		if( dp( 0 , 1 , 14 ) && dp( 1 , 0 , 14 ) && dp( 0 , 1 , 15 ) && dp( 1 , 0 , 15 ) )
			return "Freedom";
		return "Chores";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	WalkingToSchool *obj;
	string answer;
	obj = new WalkingToSchool();
	clock_t startTime = clock();
	answer = obj->canWalkExactly(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Chores";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	int t1[] = {0,1,1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,0,2,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Freedom";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	int t1[] = {0,2,2,3,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,0,3,0,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Chores";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	int t1[] = {0,0,0,0,0,1,1,2,2,2,2,3,3,5,5,5,6,6,6,7,8,9,9,9,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {4,5,6,7,9,4,6,0,1,3,8,4,6,1,4,8,1,7,8,1,4,2,5,6,8};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Chores";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 8;
	int t1[] = {0,1,4,6,7,5,2,3,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,4,6,7,5,2,3,0,7};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Freedom";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 2000;
	p1.clear() /*{}*/;
	p2.clear() /*{}*/;
	p3 = "Chores";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

#include<bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int  i = 0 ; i < (n) ; ++i )
#define clr( t , val ) memset( t , val , sizeof( t ) )

#define pb push_back
#define all( v ) v.begin() , v.end()
#define SZ( v ) ((int)(v).size())

#define mp make_pair
#define fi first
#define se second

#define DEBUG( x ) cout << #x << " " << (x) << endl;

#define N 200
#define MOD 1000000007LL

typedef vector< int > vi;
typedef vector< vi > vvi;
typedef long long ll;

ll C[ N + 5 ][ N + 5 ];

int solve( vi &v , int n ){
	
	int sum = 0;
	ll ans = 1;
	for( auto x : v ){
		cout << x << " ";
		sum += x;
		ans = (ans * C[ sum ][ x ])%MOD;
	}
	cout << endl;
	return (int)ans;
}

class PermutationCountsDiv2 {
public:
	int countPermutations(int n, vector <int> pos) {
		REP( i , N + 1 ) C[ i ][ i ] = C[ i ][ 0 ] = 1;
	    for( int i = 2 ; i <= N ; ++i )
    	     for( int j = 1 ; j <= i ; ++j )
    	        C[ i ][ j ] = ( C[ i - 1 ][ j ] + C[ i - 1 ][ j - 1 ] )%MOD;
    	vi NEXT( n , -1 );
    	for( auto x : pos ){
    		x --;
    		NEXT[ x ] = x + 1;
    	}
    	vi vec;
    	vi vis( n );
    	REP( i , n ){
    		if( vis[ i ] ) continue;
    		int p = i , cnt = 0;
			while( 1 ){
				vis[ p ] = 1;
				cnt ++;
				if( NEXT[ p ] == -1 ) break;
				p = NEXT[ p ];
			}
			vec.pb( cnt );
    	}
    	return solve( vec , n );
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	PermutationCountsDiv2 *obj;
	int answer;
	obj = new PermutationCountsDiv2();
	clock_t startTime = clock();
	answer = obj->countPermutations(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 5;
	int t1[] = {3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 13;
	int t1[] = {12,11,10,9,8,7,6,5,4,3,2,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 13;
	p1.clear() /*{}*/;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 9;
	int t1[] = {2,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1421;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 80;
	int t1[] = {31,41,59,26,53,58,9,79,32,3,8,46};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 82650786;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

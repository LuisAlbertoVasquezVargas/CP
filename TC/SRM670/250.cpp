#include <bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; i++ )
#define clr( t , val ) memset( t , val , sizeof(t) )

#define all(v)  v.begin() , v.end()
#define pb push_back
#define SZ( v ) ((int)(v).size())

#define mp make_pair
#define fi first
#define se second

#define test() cerr << "hola que hace ?" << endl;
#define DEBUG( x ) cerr <<  #x << "=" << x << endl;
#define DEBUG2( x , y ) cerr << #x << "=" << x << " " << #y << "=" << y << endl;


typedef long long ll;
typedef pair< int , int > pii;
typedef vector< int > vi;
typedef vector< vi > vvi;

const int N = 50;
const int INF = INT_MAX/2;
int n;
bool used1[ N + 5 ][ N + 5 ][ N + 5 ][ 2 ];
int memo1[ N + 5 ][ N + 5 ][ N + 5 ][ 2 ];
int V[ N + 5 ];
vi op = { -1 , 1 };
vvi T( 2 );
int dp1( int a , int b , int sum , int taked ){
	if( b == n ) return ( (taked && sum == 0) ? 0 : (-INF) );
	if( used1[ a ][ b ][ sum ][ taked ] ) return memo1[ a ][ b ][ sum ][ taked ];
	used1[ a ][ b ][ sum ][ taked ] = 1;
	
	int &dev = memo1[ a ][ b ][ sum ][ taked ] = (-INF);
	REP( k , 2 ){
		int nsum = sum + op[ k ];
		if( nsum >= 0 ){
			REP( t , 2 ){
				int NEXT = lower_bound( all( T[ k ^ t ] ) , a ) - T[ k ^ t ].begin();
				if( NEXT < n ) dev = max( dev , (t == 0) + dp1( NEXT + 1 - t , b + 1 , nsum , (t == 0 ? taked : 1) ) );	
			}
		}
	}
	return dev;
}
bool used2[ N + 5 ][ N + 5 ][ N + 5 ][ 2 ];
int memo2[ N + 5 ][ N + 5 ][ N + 5 ][ 2 ];

int dp2( int a , int b , int sum , int taked ){
	if( b == n ) return ( (taked && sum == 0) ? 1 : 0 );
	if( used2[ a ][ b ][ sum ][ taked ] ) return memo2[ a ][ b ][ sum ][ taked ];
	used2[ a ][ b ][ sum ][ taked ] = 1;
	
	int &dev = memo2[ a ][ b ][ sum ][ taked ] = 0;
	int cur = dp1( a , b , sum , taked );
	REP( k , 2 ){
		int nsum = sum + op[ k ];
		if( nsum >= 0 ){
			REP( t , 2 ){
				int NEXT = lower_bound( all( T[ k ^ t ] ) , a ) - T[ k ^ t ].begin();
				if( NEXT < n ) {
					if( cur == (t == 0) + dp1( NEXT + 1 - t , b + 1 , nsum , (t == 0 ? taked : 1) ) ){
						dev += dp2( NEXT + 1 - t , b + 1 , nsum , (t == 0 ? taked : 1) );
					}
				}
			}
		}
	}
	return dev;
}
class Bracket107 {
public:
	int yetanother(string s) {
		n = SZ(s);
		REP( k , 2 ) T[ k ].clear();
		REP( i , n )
			if( s[ i ] == ')' ) {
				T[ 1 ].pb( i );
				V[ i ] = +1;
			} else {
				T[ 0 ].pb( i );
				V[ i ] = -1;
			}
		
		clr( used1 , 0 );
		cout << dp1( 0 , 0 , 0 , 0 ) << endl;
		clr( used2 , 0 );
		return (int)dp2( 0 , 0 , 0 , 0 );
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	Bracket107 *obj;
	int answer;
	obj = new Bracket107();
	clock_t startTime = clock();
	answer = obj->yetanother(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "(())";
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "(())()";
	p1 = 3;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "()()()";
	p1 = 3;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "(((())))";
	p1 = 5;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "((())())";
	p1 = 9;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

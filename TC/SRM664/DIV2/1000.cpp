#include <bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; i++ )
#define clr( t , val ) memset( t , val , sizeof(t) )

#define all(v)  v.begin() , v.end()
#define pb push_back
#define SZ( v ) ((int)(v).size())

#define mp make_pair
#define fi first
#define se second

#define test() cerr << "hola que hace ?" << endl;
#define DEBUG( x ) cerr <<  #x << "=" << x << endl;
#define DEBUG2( x , y ) cerr << #x << "=" << x << " " << #y << "=" << y << endl;

#define N 40

typedef long long ll;
typedef pair< int , int > pii;
typedef vector< int > vi;
typedef vector< vi > vvi;
typedef long double ld;

ld C[ N + 1 ][ N + 1 ];
bool used[ N + 1 ][ N + 1 ][ N + 1 ];
ld memo[ N + 1 ][ N + 1 ][ N + 1 ];
ld dp( int lo , int hi , int pk ){
	if( lo == hi )
		return pk == lo;
	if( used[ lo ][ hi ][ pk ] ) return memo[ lo ][ hi ][ pk ];
	used[ lo ][ hi ][ pk ] = 1;
	
	ld &dev = memo[ lo ][ hi ][ pk ] = 0;
	int med = (lo + hi) >> 1;
	int len = (hi - lo + 1);
	int L = med - lo + 1 , R = hi - (med + 1) + 1;
	REP( i , L ) dev += dp( lo , med , pk ) / ( C[ L + R ][ L ] * L );
	REP( i , R ) dev += dp( med + 1 , hi , pk ) / ( C[ L + R ][ L ] * R );
	return dev;
}
class BearSortsDiv2 {
public:
	double getProbability(vector <int> seq) {
		REP( i , N + 1 ) C[ i ][ i ] = C[ i ][ 0 ] = 1;
		for( int i = 2 ; i <= N ; ++i )
			for( int j = 1 ; j < i ; ++j )
				C[ i ][ j ] = C[ i - 1 ][ j - 1 ] + C[ i - 1 ][ j ];
	
		clr( used , 0 );
		ld ans = 1;
		int n = SZ( seq );
		for( auto s : seq ){
			ans *= dp( 0 , n - 1 , s - 1 );
		}
		DEBUG( ans );
		return log( ans );
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	BearSortsDiv2 *obj;
	double answer;
	obj = new BearSortsDiv2();
	clock_t startTime = clock();
	answer = obj->getProbability(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	double p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -0.6931471805599453;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1.3862943611198906;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {10,13,18,2,4,6,24,22,19,5,7,20,23,14,21,17,25,3,1,11,12,8,15,16,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -57.53121598647546;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

